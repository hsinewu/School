// Generated by CoffeeScript 1.8.0
var A, B, assStm, datas, debug, digit, digits, exp, fact, fs, id, ifStm, init, isdigit, isletter, isspace, letter, log, number, peek, pos, readStr, space, start, stmt, stmts, str, term, valid, _ref,
  __slice = [].slice;

console.log('By hsine');

_ref = ['', 0, true], str = _ref[0], pos = _ref[1], valid = _ref[2];

if (typeof process !== "undefined" && process !== null) {
  if (process.argv[2] != null) {
    str = process.argv[2];
  }
}

log = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return args.forEach(function(e) {
    return console.log('\t' + e);
  });
};

init = function(s) {
  var _ref1;
  _ref1 = [s, 0, true], str = _ref1[0], pos = _ref1[1], valid = _ref1[2];
};

peek = function() {
  space();
  return str[pos];
};

isdigit = function(c) {
  return '0123456789'.split('').some(function(e) {
    return e === c;
  });
};

isletter = function(c) {
  return 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('').some(function(l) {
    return l === c;
  });
};

isspace = function(c) {
  return /\s/.test(c);
};

space = function() {
  while (isspace(str[pos])) {
    pos++;
  }
};

readStr = function(s) {
  space();
  if (str.substr(pos, s.length) === s) {
    pos += s.length;
    return;
  }
  if (valid) {
    log("missing symbol " + s + ", get " + str[pos] + " at " + pos);
  }
  return valid = false;
};

digit = function() {
  if (isdigit(peek())) {
    ++pos;
    return;
  }
  if (valid) {
    log("missing digit, get " + str[pos] + " at " + pos);
  }
  return valid = false;
};

digits = function() {
  digit();
  while (isdigit(peek())) {
    digit();
  }
};

letter = function() {
  if (isletter(peek())) {
    ++pos;
    return;
  }
  if (valid) {
    log("missing letter, get " + str[pos] + " at " + pos + "(missing id?)");
  }
  return valid = false;
};

number = function() {
  digits();
  if (peek() === '.') {
    ++pos;
    digits();
  }
  if (peek() === 'E') {
    ++pos;
    if (str[pos] === '+' || str[pos] === '-') {
      ++pos;
    }
    digits();
  }
};

id = function() {
  var type;
  letter();
  type = true;
  while (type) {
    type = false;
    if (isdigit(str[pos])) {
      type = 1;
    }
    if (isletter(str[pos])) {
      type = 2;
    }
    if (type === 1) {
      digit();
    } else if (type === 2) {
      letter();
    }
  }
};

stmts = function() {
  if (peek() === 'I') {
    return ifStm();
  } else {
    return assStm();
  }
};

assStm = function() {
  stmt();
  space();
  if (!(valid === false || pos >= str.length || peek() === '}' || peek() === '$')) {
    return assStm();
  }
};

ifStm = function() {
  readStr('If');
  readStr('(');
  id();
  readStr('>');
  digit();
  readStr(')');
  readStr('{');
  assStm();
  return readStr('}');
};

stmt = function() {
  readStr('declare');
  if (valid && /[0-9a-zA-Z]/.test(str[pos])) {
    log("unexpected token " + str[pos] + " at " + pos + "(missing white space?)");
    valid = false;
  }
  id();
  readStr('=');
  exp();
  return readStr(';');
};

exp = function() {
  term();
  return A();
};

A = function() {
  switch (peek()) {
    case '+':
    case '-':
      ++pos;
      term();
      A();
      break;
  }
};

term = function() {
  fact();
  return B();
};

B = function() {
  switch (peek()) {
    case '*':
    case '/':
      ++pos;
      term();
      B();
      break;
  }
};

fact = function() {
  if (peek() === '(') {
    readStr('(');
    exp();
    return readStr(')');
  } else if (isletter(peek())) {
    return id();
  } else if (isdigit(peek())) {
    return number();
  } else {
    if (valid) {
      log("unexpected input " + str[pos] + " at " + pos + "(missing oprand?)");
    }
    return valid = false;
  }
};

debug = function(label) {
  return console.log(label, str.substr(pos, str.length));
};

start = stmts;

if (str.length > 1) {
  stmts();
  console.log("Is '" + str + "' valid? " + valid);
} else if (typeof process !== "undefined" && process !== null) {
  fs = require('fs');
  datas = JSON.parse(fs.readFileSync('datas.json'));
  datas.forEach(function(obj) {
    if (obj.description != null) {
      console.log("  Test for: " + obj.description);
    }
    init(obj.code);
    start();
    console.log("    '" + obj.code + "' " + valid);
    if ((obj.assert != null) && valid !== obj.assert) {
      return console.log('WARNING!!! THE OUTCOME OF #{obj.code} IS NOT WHAT I EXPECT');
    }
  });
}
